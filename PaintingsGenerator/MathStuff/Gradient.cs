using System;
using System.Windows.Media;
using System.Windows.Media.Imaging;

using PaintingsGenerator.Images;

namespace PaintingsGenerator.MathStuff {
    internal class Gradient {
        private record struct DoubleWrap : IToDoubleConvertable {
            private double val;
            public double Value {
                get => val;
                set => val = value;
            }
        }

        private static readonly double[,] kernel_x;
        private static readonly double[,] kernel_y;
        private static readonly double[,] gaussian = new double[,] {
            { 1.231146475545339346e-04, 1.671132240044796626e-04, 2.206216731826896873e-04, 2.832838358387498889e-04, 3.537786979936810420e-04, 4.297123430523642476e-04, 5.076451510018051717e-04, 5.832824645027786517e-04, 6.518292765446043104e-04, 7.084758802728233522e-04, 7.489495095298332036e-04, 7.700453032566490852e-04, 7.700453032566490852e-04, 7.489495095298332036e-04, 7.084758802728233522e-04, 6.518292765446043104e-04, 5.832824645027786517e-04, 5.076451510018051717e-04, 4.297123430523642476e-04, 3.537786979936810420e-04, 2.832838358387498889e-04, 2.206216731826896873e-04, 1.671132240044796626e-04, 1.231146475545339346e-04 },
            { 1.231146475545339346e-04, 1.671132240044796626e-04, 2.206216731826896873e-04, 2.832838358387498889e-04, 3.537786979936810420e-04, 4.297123430523642476e-04, 5.076451510018051717e-04, 5.832824645027786517e-04, 6.518292765446043104e-04, 7.084758802728233522e-04, 7.489495095298332036e-04, 7.700453032566490852e-04, 7.700453032566490852e-04, 7.489495095298332036e-04, 7.084758802728233522e-04, 6.518292765446043104e-04, 5.832824645027786517e-04, 5.076451510018051717e-04, 4.297123430523642476e-04, 3.537786979936810420e-04, 2.832838358387498889e-04, 2.206216731826896873e-04, 1.671132240044796626e-04, 1.231146475545339346e-04 },
            { 1.671132240044796626e-04, 2.268359629978320227e-04, 2.994672025072467412e-04, 3.845234994836797902e-04, 4.802117374347624791e-04, 5.832824645027786517e-04, 6.890668130822942073e-04, 7.917353059485578376e-04, 8.847793017936868634e-04, 9.616702060521237954e-04, 1.016608256126993537e-03, 1.045243241261967822e-03, 1.045243241261967822e-03, 1.016608256126993537e-03, 9.616702060521237954e-04, 8.847793017936868634e-04, 7.917353059485578376e-04, 6.890668130822942073e-04, 5.832824645027786517e-04, 4.802117374347624791e-04, 3.845234994836797902e-04, 2.994672025072467412e-04, 2.268359629978320227e-04, 1.671132240044796626e-04 },
            { 2.206216731826896873e-04, 2.994672025072467412e-04, 3.953544411226072967e-04, 5.076451510018051717e-04, 6.339720726827924096e-04, 7.700453032566489768e-04, 9.097010373805265813e-04, 1.045243241261967606e-03, 1.168079253583801129e-03, 1.269590070881967958e-03, 1.342118888401443774e-03, 1.379922589273555088e-03, 1.379922589273555088e-03, 1.342118888401443774e-03, 1.269590070881967958e-03, 1.168079253583801129e-03, 1.045243241261967606e-03, 9.097010373805265813e-04, 7.700453032566489768e-04, 6.339720726827924096e-04, 5.076451510018051717e-04, 3.953544411226072967e-04, 2.994672025072467412e-04, 2.206216731826896873e-04 },
            { 2.832838358387498889e-04, 3.845234994836797902e-04, 5.076451510018051717e-04, 6.518292765446043104e-04, 8.140362547949138699e-04, 9.887577413825569556e-04, 1.168079253583801345e-03, 1.342118888401443774e-03, 1.499843450307246622e-03, 1.630185919786838415e-03, 1.723314764924152110e-03, 1.771855677688803860e-03, 1.771855677688803860e-03, 1.723314764924152110e-03, 1.630185919786838415e-03, 1.499843450307246622e-03, 1.342118888401443774e-03, 1.168079253583801345e-03, 9.887577413825569556e-04, 8.140362547949138699e-04, 6.518292765446043104e-04, 5.076451510018051717e-04, 3.845234994836797902e-04, 2.832838358387498889e-04 },
            { 3.537786979936810420e-04, 4.802117374347624791e-04, 6.339720726827924096e-04, 8.140362547949138699e-04, 1.016608256126993537e-03, 1.234808987042264328e-03, 1.458754454742459440e-03, 1.676103655845938073e-03, 1.873077796595785764e-03, 2.035855842188260146e-03, 2.152159695109427760e-03, 2.212779959115872015e-03, 2.212779959115872015e-03, 2.152159695109427760e-03, 2.035855842188260146e-03, 1.873077796595785764e-03, 1.676103655845938073e-03, 1.458754454742459440e-03, 1.234808987042264328e-03, 1.016608256126993537e-03, 8.140362547949138699e-04, 6.339720726827924096e-04, 4.802117374347624791e-04, 3.537786979936810420e-04 },
            { 4.297123430523642476e-04, 5.832824645027786517e-04, 7.700453032566489768e-04, 9.887577413825569556e-04, 1.234808987042264328e-03, 1.499843450307246405e-03, 1.771855677688803860e-03, 2.035855842188260146e-03, 2.275107724854906737e-03, 2.472823799241827963e-03, 2.614090646081953465e-03, 2.687722201148413058e-03, 2.687722201148413058e-03, 2.614090646081953465e-03, 2.472823799241827963e-03, 2.275107724854906737e-03, 2.035855842188260146e-03, 1.771855677688803860e-03, 1.499843450307246405e-03, 1.234808987042264328e-03, 9.887577413825569556e-04, 7.700453032566489768e-04, 5.832824645027786517e-04, 4.297123430523642476e-04 },
            { 5.076451510018051717e-04, 6.890668130822942073e-04, 9.097010373805265813e-04, 1.168079253583801345e-03, 1.458754454742459440e-03, 1.771855677688803860e-03, 2.093200154932784406e-03, 2.405079498262460442e-03, 2.687722201148413925e-03, 2.921296144416321659e-03, 3.088183204923600211e-03, 3.175168609216852660e-03, 3.175168609216852660e-03, 3.088183204923600211e-03, 2.921296144416321659e-03, 2.687722201148413925e-03, 2.405079498262460442e-03, 2.093200154932784406e-03, 1.771855677688803860e-03, 1.458754454742459440e-03, 1.168079253583801345e-03, 9.097010373805265813e-04, 6.890668130822942073e-04, 5.076451510018051717e-04 },
            { 5.832824645027786517e-04, 7.917353059485578376e-04, 1.045243241261967606e-03, 1.342118888401443774e-03, 1.676103655845938073e-03, 2.035855842188260146e-03, 2.405079498262460442e-03, 2.763427749291445020e-03, 3.088183204923600211e-03, 3.356558831094907675e-03, 3.548311467270415243e-03, 3.648257385973297830e-03, 3.648257385973297830e-03, 3.548311467270415243e-03, 3.356558831094907675e-03, 3.088183204923600211e-03, 2.763427749291445020e-03, 2.405079498262460442e-03, 2.035855842188260146e-03, 1.676103655845938073e-03, 1.342118888401443774e-03, 1.045243241261967606e-03, 7.917353059485578376e-04, 5.832824645027786517e-04 },
            { 6.518292765446043104e-04, 8.847793017936868634e-04, 1.168079253583801129e-03, 1.499843450307246622e-03, 1.873077796595785764e-03, 2.275107724854906737e-03, 2.687722201148413925e-03, 3.088183204923600211e-03, 3.451103619270485656e-03, 3.751018499102459942e-03, 3.965305726510111317e-03, 4.076997196503505047e-03, 4.076997196503505047e-03, 3.965305726510111317e-03, 3.751018499102459942e-03, 3.451103619270485656e-03, 3.088183204923600211e-03, 2.687722201148413925e-03, 2.275107724854906737e-03, 1.873077796595785764e-03, 1.499843450307246622e-03, 1.168079253583801129e-03, 8.847793017936868634e-04, 6.518292765446043104e-04 },
            { 7.084758802728233522e-04, 9.616702060521237954e-04, 1.269590070881967958e-03, 1.630185919786838415e-03, 2.035855842188260146e-03, 2.472823799241827963e-03, 2.921296144416321659e-03, 3.356558831094907675e-03, 3.751018499102459942e-03, 4.076997196503505047e-03, 4.309906851733557448e-03, 4.431304762766357513e-03, 4.431304762766357513e-03, 4.309906851733557448e-03, 4.076997196503505047e-03, 3.751018499102459942e-03, 3.356558831094907675e-03, 2.921296144416321659e-03, 2.472823799241827963e-03, 2.035855842188260146e-03, 1.630185919786838415e-03, 1.269590070881967958e-03, 9.616702060521237954e-04, 7.084758802728233522e-04 },
            { 7.489495095298332036e-04, 1.016608256126993537e-03, 1.342118888401443774e-03, 1.723314764924152110e-03, 2.152159695109427760e-03, 2.614090646081953465e-03, 3.088183204923600211e-03, 3.548311467270415243e-03, 3.965305726510111317e-03, 4.309906851733557448e-03, 4.556122110299786789e-03, 4.684455210208494404e-03, 4.684455210208494404e-03, 4.556122110299786789e-03, 4.309906851733557448e-03, 3.965305726510111317e-03, 3.548311467270415243e-03, 3.088183204923600211e-03, 2.614090646081953465e-03, 2.152159695109427760e-03, 1.723314764924152110e-03, 1.342118888401443774e-03, 1.016608256126993537e-03, 7.489495095298332036e-04 },
            { 7.700453032566490852e-04, 1.045243241261967822e-03, 1.379922589273555088e-03, 1.771855677688803860e-03, 2.212779959115872015e-03, 2.687722201148413058e-03, 3.175168609216852660e-03, 3.648257385973297830e-03, 4.076997196503505047e-03, 4.431304762766357513e-03, 4.684455210208494404e-03, 4.816403091313462351e-03, 4.816403091313462351e-03, 4.684455210208494404e-03, 4.431304762766357513e-03, 4.076997196503505047e-03, 3.648257385973297830e-03, 3.175168609216852660e-03, 2.687722201148413058e-03, 2.212779959115872015e-03, 1.771855677688803860e-03, 1.379922589273555088e-03, 1.045243241261967822e-03, 7.700453032566490852e-04 },
            { 7.700453032566490852e-04, 1.045243241261967822e-03, 1.379922589273555088e-03, 1.771855677688803860e-03, 2.212779959115872015e-03, 2.687722201148413058e-03, 3.175168609216852660e-03, 3.648257385973297830e-03, 4.076997196503505047e-03, 4.431304762766357513e-03, 4.684455210208494404e-03, 4.816403091313462351e-03, 4.816403091313462351e-03, 4.684455210208494404e-03, 4.431304762766357513e-03, 4.076997196503505047e-03, 3.648257385973297830e-03, 3.175168609216852660e-03, 2.687722201148413058e-03, 2.212779959115872015e-03, 1.771855677688803860e-03, 1.379922589273555088e-03, 1.045243241261967822e-03, 7.700453032566490852e-04 },
            { 7.489495095298332036e-04, 1.016608256126993537e-03, 1.342118888401443774e-03, 1.723314764924152110e-03, 2.152159695109427760e-03, 2.614090646081953465e-03, 3.088183204923600211e-03, 3.548311467270415243e-03, 3.965305726510111317e-03, 4.309906851733557448e-03, 4.556122110299786789e-03, 4.684455210208494404e-03, 4.684455210208494404e-03, 4.556122110299786789e-03, 4.309906851733557448e-03, 3.965305726510111317e-03, 3.548311467270415243e-03, 3.088183204923600211e-03, 2.614090646081953465e-03, 2.152159695109427760e-03, 1.723314764924152110e-03, 1.342118888401443774e-03, 1.016608256126993537e-03, 7.489495095298332036e-04 },
            { 7.084758802728233522e-04, 9.616702060521237954e-04, 1.269590070881967958e-03, 1.630185919786838415e-03, 2.035855842188260146e-03, 2.472823799241827963e-03, 2.921296144416321659e-03, 3.356558831094907675e-03, 3.751018499102459942e-03, 4.076997196503505047e-03, 4.309906851733557448e-03, 4.431304762766357513e-03, 4.431304762766357513e-03, 4.309906851733557448e-03, 4.076997196503505047e-03, 3.751018499102459942e-03, 3.356558831094907675e-03, 2.921296144416321659e-03, 2.472823799241827963e-03, 2.035855842188260146e-03, 1.630185919786838415e-03, 1.269590070881967958e-03, 9.616702060521237954e-04, 7.084758802728233522e-04 },
            { 6.518292765446043104e-04, 8.847793017936868634e-04, 1.168079253583801129e-03, 1.499843450307246622e-03, 1.873077796595785764e-03, 2.275107724854906737e-03, 2.687722201148413925e-03, 3.088183204923600211e-03, 3.451103619270485656e-03, 3.751018499102459942e-03, 3.965305726510111317e-03, 4.076997196503505047e-03, 4.076997196503505047e-03, 3.965305726510111317e-03, 3.751018499102459942e-03, 3.451103619270485656e-03, 3.088183204923600211e-03, 2.687722201148413925e-03, 2.275107724854906737e-03, 1.873077796595785764e-03, 1.499843450307246622e-03, 1.168079253583801129e-03, 8.847793017936868634e-04, 6.518292765446043104e-04 },
            { 5.832824645027786517e-04, 7.917353059485578376e-04, 1.045243241261967606e-03, 1.342118888401443774e-03, 1.676103655845938073e-03, 2.035855842188260146e-03, 2.405079498262460442e-03, 2.763427749291445020e-03, 3.088183204923600211e-03, 3.356558831094907675e-03, 3.548311467270415243e-03, 3.648257385973297830e-03, 3.648257385973297830e-03, 3.548311467270415243e-03, 3.356558831094907675e-03, 3.088183204923600211e-03, 2.763427749291445020e-03, 2.405079498262460442e-03, 2.035855842188260146e-03, 1.676103655845938073e-03, 1.342118888401443774e-03, 1.045243241261967606e-03, 7.917353059485578376e-04, 5.832824645027786517e-04 },
            { 5.076451510018051717e-04, 6.890668130822942073e-04, 9.097010373805265813e-04, 1.168079253583801345e-03, 1.458754454742459440e-03, 1.771855677688803860e-03, 2.093200154932784406e-03, 2.405079498262460442e-03, 2.687722201148413925e-03, 2.921296144416321659e-03, 3.088183204923600211e-03, 3.175168609216852660e-03, 3.175168609216852660e-03, 3.088183204923600211e-03, 2.921296144416321659e-03, 2.687722201148413925e-03, 2.405079498262460442e-03, 2.093200154932784406e-03, 1.771855677688803860e-03, 1.458754454742459440e-03, 1.168079253583801345e-03, 9.097010373805265813e-04, 6.890668130822942073e-04, 5.076451510018051717e-04 },
            { 4.297123430523642476e-04, 5.832824645027786517e-04, 7.700453032566489768e-04, 9.887577413825569556e-04, 1.234808987042264328e-03, 1.499843450307246405e-03, 1.771855677688803860e-03, 2.035855842188260146e-03, 2.275107724854906737e-03, 2.472823799241827963e-03, 2.614090646081953465e-03, 2.687722201148413058e-03, 2.687722201148413058e-03, 2.614090646081953465e-03, 2.472823799241827963e-03, 2.275107724854906737e-03, 2.035855842188260146e-03, 1.771855677688803860e-03, 1.499843450307246405e-03, 1.234808987042264328e-03, 9.887577413825569556e-04, 7.700453032566489768e-04, 5.832824645027786517e-04, 4.297123430523642476e-04 },
            { 3.537786979936810420e-04, 4.802117374347624791e-04, 6.339720726827924096e-04, 8.140362547949138699e-04, 1.016608256126993537e-03, 1.234808987042264328e-03, 1.458754454742459440e-03, 1.676103655845938073e-03, 1.873077796595785764e-03, 2.035855842188260146e-03, 2.152159695109427760e-03, 2.212779959115872015e-03, 2.212779959115872015e-03, 2.152159695109427760e-03, 2.035855842188260146e-03, 1.873077796595785764e-03, 1.676103655845938073e-03, 1.458754454742459440e-03, 1.234808987042264328e-03, 1.016608256126993537e-03, 8.140362547949138699e-04, 6.339720726827924096e-04, 4.802117374347624791e-04, 3.537786979936810420e-04 },
            { 2.832838358387498889e-04, 3.845234994836797902e-04, 5.076451510018051717e-04, 6.518292765446043104e-04, 8.140362547949138699e-04, 9.887577413825569556e-04, 1.168079253583801345e-03, 1.342118888401443774e-03, 1.499843450307246622e-03, 1.630185919786838415e-03, 1.723314764924152110e-03, 1.771855677688803860e-03, 1.771855677688803860e-03, 1.723314764924152110e-03, 1.630185919786838415e-03, 1.499843450307246622e-03, 1.342118888401443774e-03, 1.168079253583801345e-03, 9.887577413825569556e-04, 8.140362547949138699e-04, 6.518292765446043104e-04, 5.076451510018051717e-04, 3.845234994836797902e-04, 2.832838358387498889e-04 },
            { 2.206216731826896873e-04, 2.994672025072467412e-04, 3.953544411226072967e-04, 5.076451510018051717e-04, 6.339720726827924096e-04, 7.700453032566489768e-04, 9.097010373805265813e-04, 1.045243241261967606e-03, 1.168079253583801129e-03, 1.269590070881967958e-03, 1.342118888401443774e-03, 1.379922589273555088e-03, 1.379922589273555088e-03, 1.342118888401443774e-03, 1.269590070881967958e-03, 1.168079253583801129e-03, 1.045243241261967606e-03, 9.097010373805265813e-04, 7.700453032566489768e-04, 6.339720726827924096e-04, 5.076451510018051717e-04, 3.953544411226072967e-04, 2.994672025072467412e-04, 2.206216731826896873e-04 },
            { 1.671132240044796626e-04, 2.268359629978320227e-04, 2.994672025072467412e-04, 3.845234994836797902e-04, 4.802117374347624791e-04, 5.832824645027786517e-04, 6.890668130822942073e-04, 7.917353059485578376e-04, 8.847793017936868634e-04, 9.616702060521237954e-04, 1.016608256126993537e-03, 1.045243241261967822e-03, 1.045243241261967822e-03, 1.016608256126993537e-03, 9.616702060521237954e-04, 8.847793017936868634e-04, 7.917353059485578376e-04, 6.890668130822942073e-04, 5.832824645027786517e-04, 4.802117374347624791e-04, 3.845234994836797902e-04, 2.994672025072467412e-04, 2.268359629978320227e-04, 1.671132240044796626e-04 },
            { 1.231146475545339346e-04, 1.671132240044796626e-04, 2.206216731826896873e-04, 2.832838358387498889e-04, 3.537786979936810420e-04, 4.297123430523642476e-04, 5.076451510018051717e-04, 5.832824645027786517e-04, 6.518292765446043104e-04, 7.084758802728233522e-04, 7.489495095298332036e-04, 7.700453032566490852e-04, 7.700453032566490852e-04, 7.489495095298332036e-04, 7.084758802728233522e-04, 6.518292765446043104e-04, 5.832824645027786517e-04, 5.076451510018051717e-04, 4.297123430523642476e-04, 3.537786979936810420e-04, 2.832838358387498889e-04, 2.206216731826896873e-04, 1.671132240044796626e-04, 1.231146475545339346e-04 },
            { 1.231146475545339346e-04, 1.671132240044796626e-04, 2.206216731826896873e-04, 2.832838358387498889e-04, 3.537786979936810420e-04, 4.297123430523642476e-04, 5.076451510018051717e-04, 5.832824645027786517e-04, 6.518292765446043104e-04, 7.084758802728233522e-04, 7.489495095298332036e-04, 7.700453032566490852e-04, 7.700453032566490852e-04, 7.489495095298332036e-04, 7.084758802728233522e-04, 6.518292765446043104e-04, 5.832824645027786517e-04, 5.076451510018051717e-04, 4.297123430523642476e-04, 3.537786979936810420e-04, 2.832838358387498889e-04, 2.206216731826896873e-04, 1.671132240044796626e-04, 1.231146475545339346e-04 },
            { 1.231146475545339346e-04, 1.671132240044796626e-04, 2.206216731826896873e-04, 2.832838358387498889e-04, 3.537786979936810420e-04, 4.297123430523642476e-04, 5.076451510018051717e-04, 5.832824645027786517e-04, 6.518292765446043104e-04, 7.084758802728233522e-04, 7.489495095298332036e-04, 7.700453032566490852e-04, 7.700453032566490852e-04, 7.489495095298332036e-04, 7.084758802728233522e-04, 6.518292765446043104e-04, 5.832824645027786517e-04, 5.076451510018051717e-04, 4.297123430523642476e-04, 3.537786979936810420e-04, 2.832838358387498889e-04, 2.206216731826896873e-04, 1.671132240044796626e-04, 1.231146475545339346e-04 },
            { 1.231146475545339346e-04, 1.671132240044796626e-04, 2.206216731826896873e-04, 2.832838358387498889e-04, 3.537786979936810420e-04, 4.297123430523642476e-04, 5.076451510018051717e-04, 5.832824645027786517e-04, 6.518292765446043104e-04, 7.084758802728233522e-04, 7.489495095298332036e-04, 7.700453032566490852e-04, 7.700453032566490852e-04, 7.489495095298332036e-04, 7.084758802728233522e-04, 6.518292765446043104e-04, 5.832824645027786517e-04, 5.076451510018051717e-04, 4.297123430523642476e-04, 3.537786979936810420e-04, 2.832838358387498889e-04, 2.206216731826896873e-04, 1.671132240044796626e-04, 1.231146475545339346e-04 },
        };

        static Gradient() {
            double p1 = 0.183;
            kernel_x = new double[,] {
                {       p1,     0,          -p1 },
                { 1 - 2*p1,     0,     2*p1 - 1 },
                {       p1,     0,          -p1 },
            };

            int kernel_x_height = kernel_x.GetLength(0);
            int kernel_x_width = kernel_x.GetLength(1);
            kernel_y = new double[kernel_x_width, kernel_x_height];

            for (int y = 0; y < kernel_x_height; ++y) {
                for (int x = 0; x < kernel_x_width; ++x) {
                    kernel_x[y, x] *= 0.5;
                    kernel_y[x, y] = kernel_x[y, x];
                }
            }
        }

        private readonly double[,] dx;
        private readonly double[,] dy;

        private Gradient(Container<DoubleWrap> dx, Container<DoubleWrap> dy) {
            this.dx = new double[dx.Height, dx.Width];
            for (int y = 0; y <  dx.Height; ++y) {
                for (int x = 0; x < dx.Width; ++x)
                    this.dx[y, x] = dx[y, x].Value;
            }

            this.dy = new double[dy.Height, dy.Width];
            for (int y = 0; y <  dy.Height; ++y) {
                for (int x = 0; x < dy.Width; ++x)
                    this.dy[y, x] = dy[y, x].Value;
            }
        }

        public Vector2D GetPerpVector(Position position) {
            double grad_x = dx[position.Y, position.X];
            double grad_y = dy[position.Y, position.X];

            double perp_x = 1;
            double perp_y = -grad_x * perp_x / (grad_y != 0.0 ? grad_y : 1.0);

            return new(perp_x, perp_y);
        }

        public Vector2D GetPerpVector(Position position, Vector2D prevDir) {
            var newDir = GetPerpVector(position);

            if (newDir.X*prevDir.X + newDir.Y*prevDir.Y < 0)
                newDir = newDir.Reverse();

            return newDir;
        }

        public BitmapSource ToBitmap() {
            int height = dx.GetLength(0), width = dx.GetLength(1);
            int stride = width;
            var pixels = new byte[height * stride];

            for (int y = 0; y < height; ++y) {
                for (int x = 0; x < width; ++x) {
                    var val = (int)(Math.Atan2(dy[y, x], dx[y, x])*byte.MaxValue);
                    val = Math.Max(Math.Min(val, byte.MaxValue), byte.MinValue);

                    pixels[y*width + x] = (byte)val;
                }
            }

            return BitmapSource.Create(
                width, height, 96, 96,
                PixelFormats.Gray8, null,
                pixels, stride
            );
        }

        #region StaticMethods
        public static Gradient GetGradient(GrayImage grayImage) {
            var dx = MakeConvolution(grayImage, kernel_x);
            var dy = MakeConvolution(grayImage, kernel_y);

            dx = MakeConvolution(dx, gaussian);
            dy = MakeConvolution(dy, gaussian);

            return new(dx, dy);
        }

        private static Container<DoubleWrap> MakeConvolution<T>(Container<T> image, double[,] kernel)
                where T : IToDoubleConvertable {
            var kernel_height = kernel.GetLength(0);
            var kernel_width = kernel.GetLength(1);

            int kernel_center_y = kernel_height / 2;
            int kernel_center_x = kernel_width / 2;

            var res = new DoubleWrap[image.Height, image.Width];
            for (int img_y = 0; img_y < image.Height; ++img_y) {
                for (int img_x = 0; img_x < image.Width; ++img_x) {
                    for (int kern_y = 0; kern_y < kernel_height; ++kern_y) {
                        for (int kern_x = 0; kern_x < kernel_width; ++kern_x) {
                            int y = img_y + (kern_y - kernel_center_y);
                            int x = img_x + (kern_x - kernel_center_x);

                            if (y >= 0 && y < image.Height && x >= 0 && x < image.Width) {
                                res[img_y, img_x].Value = res[img_y, img_x].Value +
                                                          image[y, x].Value*kernel[kern_y, kern_x];
                            }
                        }
                    }
                }
            }

            return new(res);
        }
        #endregion
    }
}
